# GitHub Actions workflow name - this appears in the Actions tab
name: CI

# Defines when this workflow should run
on:
  # Run on pull requests targeting the main branch
  pull_request:
    branches: [ main ]
  # Run on direct pushes to the main branch
  push:
    branches: [ main ]

# Define all the jobs that will run in this workflow
jobs:
  # Main testing job - runs comprehensive tests and checks
  test:
    # Use Ubuntu latest as the runner environment
    runs-on: ubuntu-latest
    
    # Matrix strategy allows running the same job with different configurations
    strategy:
      matrix:
        # Test against Go 1.21.x for compatibility
        go-version: [1.21.x]
    
    # Sequential steps that make up the test job
    steps:
    # Step 1: Download the repository code to the runner
    - name: Checkout code
      uses: actions/checkout@v4  # Official GitHub action for checking out code

    # Step 2: Install and configure Go environment
    - name: Set up Go
      uses: actions/setup-go@v5  # Official GitHub action for Go setup
      with:
        # Use the Go version from our matrix strategy
        go-version: ${{ matrix.go-version }}

    # Step 3: Cache Go modules to speed up subsequent runs
    - name: Cache Go modules
      uses: actions/cache@v4  # Official GitHub caching action
      with:
        # Paths to cache - Go module cache and build cache
        path: |
          ~/go/pkg/mod        # Downloaded Go modules
          ~/.cache/go-build   # Compiled Go build artifacts
        # Unique cache key based on OS, Go version, and go.sum content
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        # Fallback keys if exact match not found (partial cache restoration)
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    # Step 4: Download all Go module dependencies
    - name: Download dependencies
      run: go mod download  # Ensures all dependencies are available

    # Step 5: Verify the integrity of downloaded dependencies
    - name: Verify dependencies
      run: go mod verify  # Checks that dependencies match expected checksums

    # Step 6: Run static analysis to catch potential issues
    - name: Run go vet
      run: go vet ./...  # Examines Go source code and reports suspicious constructs

    # Step 7: Enforce consistent code formatting
    - name: Check formatting
      run: |
        # Check if any files need formatting using gofmt
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted correctly:"
          gofmt -s -l .  # List unformatted files
          exit 1         # Fail the build if formatting issues exist
        fi

    # Step 8: Run all unit tests with race detection and coverage
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      # -v: verbose output showing individual test results
      # -race: enable race condition detection
      # -coverprofile: generate coverage data to coverage.out file
      # ./...: run tests in all subdirectories

    # Step 9: Generate human-readable HTML coverage report
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    # Step 10: Compile the application to ensure it builds successfully
    - name: Build application
      run: go build -v ./...  # -v for verbose output during build

  # Security scanning job - runs independently from test job
  security:
    runs-on: ubuntu-latest
    steps:
    # Checkout code for security scanning
    - name: Checkout code
      uses: actions/checkout@v4

    # Run security vulnerability scanner on Go code
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@v2.0.0
      with:
        args: './...'  # Scan all directories recursively

  # Code quality and linting job - runs independently
  lint:
    runs-on: ubuntu-latest
    steps:
    # Checkout code for linting
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Go environment for linting tools
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22.x  # Use specific Go version for consistency

    # Run comprehensive Go linter that includes multiple checks
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest      # Use latest version of golangci-lint
        args: --timeout=5m   # Set timeout to prevent hanging builds
